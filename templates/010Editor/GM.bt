//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

local uint i, k, pos;
local byte bt;

typedef struct {
  string FileName;
} TEXTURE_FILE <name=texFileName>;
   
typedef struct (uint size) {
  TEXTURE_FILE array[size] <optimize=false>;
} NAMES_LIST;

string texFileName(TEXTURE_FILE &file) {
  return file.FileName;
}

struct {
  UINT Magic;
  UINT Version;
  UINT TexturesSectionSize;
  UINT NameCount <name="Number of Names">;
  UINT TextureCount <name="Number of textures">;
  UINT MaterialCount <name="Number of materials">;
  UINT Zero;
  UINT LocatorCount <name="Number of locators">;
  UINT MeshCount <name="Number of meshes">;
  UINT FaceCount <name="Number of faces">;
  UINT fOne; 

  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
  } OBJECT_POSITION <name="Origin">;
  struct {
    FLOAT X;
    FLOAT Y;
    FLOAT Z;
    FLOAT W;
  } OBJECT_ROTATION <name="Scale">;
} HEADER <name="File Header">;

NAMES_LIST Names(HEADER.NameCount) <name="Names">;

UINT Offsets[HEADER.NameCount];
UINT TextureNameOffsets[HEADER.TextureCount];
UINT MaterialGroupOffset;

for ( k = 0; k < HEADER.MaterialCount; ++k )  
  struct {
    local uint TexNumber;
    UINT MaterialNameOffset;
    struct {
      struct { 
        BYTE R;
        BYTE G;
        BYTE B;
        BYTE A;
      } RGBA;
      INT ZERO;
      FLOAT vSingle;
      INT v3Zero;
    
      for ( i = 0; i < 4; ++i )
      {
        INT Texture;
        if (Texture > 0) ++TexNumber;  
      };

      for ( i = 0; i < TexNumber; ++i )
        INT TextureNumber;      
 
      INT kMinusOne[4 - TexNumber];
 
      if (k < HEADER.MaterialCount - 1)
        UINT Unknown;
    } PROPERTIES;
  } MATERIAL;

for ( k = 0; k < HEADER.LocatorCount; ++k ) 
  struct {
    UINT LocatorGroupOffset;
    UINT LocatorNameOffset;
    struct {
      // transformation matrix
      INT Zero; 
      struct {  
        FLOAT X;   
        FLOAT Y; 
        FLOAT Z; 
      } XAxis;
      INT Zero;
      struct {  
        FLOAT X;   
        FLOAT Y; 
        FLOAT Z; 
      } YAxis;
      INT Zero;
      struct {  
        FLOAT X;   
        FLOAT Y; 
        FLOAT Z; 
      } ZAxis;
      INT Zero;
      struct {
        FLOAT X;
        FLOAT Y;
        FLOAT Z; 
      } POSITION;  
      // 
      FLOAT s0; 
      FLOAT s1; 
      INT Unknown;       
      INT Unknown;     
      BYTE Some[20]; 
    } PROPERTIES;
  } LOCATOR;

for ( k = 0; k < HEADER.MeshCount; ++k ) 
  struct {
    UINT NameOffset;
    UINT Offset;
    INT Unknown; // 3103
    //
    struct {
      FLOAT X;
      FLOAT Y;
      FLOAT Z;
      FLOAT R; 
    } BOUNDING_SPHERE; 
    //
    INT Zero;
    UINT FaceCount;
    UINT startTriangles;
    UINT VertCount;
    UINT startVert;
    UINT MaterialNo;
    BYTE r1[8];
    UBYTE B;
    if (B == 255)
    {
      BYTE bC[3];  
      BYTE t[20];      
    }   
    else
    {         
      BYTE t[19]; 
      UINT sMinusOne;       
    };
    BYTE tt[16];   
    if (k < HEADER.MeshCount - 1)  
      UINT Unknown;   
  } MESH;

if (HEADER.MeshCount > 0) 
{
  bt = ReadByte(FTell());
  if (bt != -1)
  {
    INT FacesExtra;
    struct {
      UINT16 I1;
      UINT16 I2;
      UINT16 I3;
    } FACE[HEADER.FaceCount];
  }; 
   
  UINT AB;
  UINT Size;
  if (AB == 0)
  {
    UINT E;
    UINT EE;
  };
    
  pos = FTell();

  struct {
  for (i = 0; i < HEADER.MeshCount; ++i)
  {
    if (AB != 0)   
      FSeek(pos + MESH[i].startVert*44.0);
    else
      FSeek(pos + MESH[i].startVert*36.0);
    struct {
    struct {
      struct {
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
      } POSITION;
      struct {
        FLOAT X;
        FLOAT Y;
        FLOAT Z;
        FLOAT W;
      } U4;
      struct {
        FLOAT U;
        FLOAT V;
      } UV;
      if (AB != 0)
      {
        FLOAT U;
        FLOAT V;
      };
    } VERTEX[MESH[i].VertCount];
    } MESH_VERTEXES;
  };
  } VERTEXES;

  if (AB == 0)
  struct {
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
    FLOAT A;
  } UNKI[EE/44.0];   


  if (HEADER.Version > 0) 
  {
    UINT CountA;
    UINT CountB;
    
    struct {
      UINT A;
      FLOAT A;
      FLOAT A;
      FLOAT A;
      FLOAT A;
      FLOAT A;
    } K1[CountA];
    
    UINT E;
    struct {
      FLOAT A;
      FLOAT A;
      FLOAT A;
    } K2[CountB];
    
    struct {
      UBYTE I1;
      UBYTE I2;
      UBYTE I3;
    
      UBYTE I1;
      UBYTE I2;
      UBYTE I3;
    
      UBYTE I1;
      UBYTE I2;
      UBYTE I3;
    } FACES[FacesExtra];
  };
};

