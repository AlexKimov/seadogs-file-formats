//------------------------------------------------
//--- 010 Editor v8.0.1 Binary Template
//
//      File: TF.bt
//   Authors: Alexander Evdokimov
//   Version: 0.1
//   Purpose: Sea Dogs game TF files
// File Mask: *.tf
//
//   History: 
//
// 2018.06 v0.1 Initial release
// 
//------------------------------------------------

local uint i, height, width = 0;

struct {
  UINT Unknown <name="Signature?">; // 250698
  UBYTE Unknown;
  UBYTE Type; // 0 - RGB565, 1 -
  UBYTE MipMapCount;
  UBYTE MaskCount;  
  UINT Width;
  UINT Height;
} HEADER <name="Header">;

BitfieldDisablePadding();

typedef struct {
  ubyte Red   : 5 <name="Red">; 
  ubyte Green : 6 <name="Green">;
  ubyte Blue  : 5 <name="Blue">; 
} RGB565 <size = 2, name="Pixel">;

typedef struct {
  ubyte Red   : 5 <name="Red">; 
  ubyte Green : 5 <name="Green">;
  ubyte Blue  : 5 <name="Blue">; 
  ubyte Alpha : 1 <name="Blue">;
} RGB5551 <size = 2, name="Pixel">;

if (HEADER.Type == 1)
  RGB565 Pixels[HEADER.Width*HEADER.Height] <name="Texture pixels">; 
else
  RGB5551 Pixels[HEADER.Width*HEADER.Height] <name="Texture pixels">; 

typedef struct (uint count) {
  height = HEADER.Height, width = HEADER.Width;
  for (i = 0; i < count; ++i) {
     height = height/2; 
     width = width/2;
     struct {
       if (HEADER.Type == 1)
         RGB565 MipMaps[height*width] <name="Map">;
       else
         RGB5551 MipMaps[height*width] <name="Map">;
     } PIXELS;      
  };
} MAPS;

MAPS Maps(HEADER.MipMapCount - 1) <name="MipMaps">;

typedef struct {
  UBYTE Red   <name="Red">; 
  UBYTE Green <name="Green">;
  UBYTE Blue  <name="Blue">; 
  UBYTE Alpha  <name="Alpha">;  
} PALETTE <size = 4, name="Pixel">;

typedef struct {
  UBYTE Index;
} COLOR_TABLE;

struct {
  PALETTE P[256] <name="Palette">; 
  height = HEADER.Height, width = HEADER.Width; 
  for (i = 0; i < HEADER.MaskCount; ++i) {
     struct {
       COLOR_TABLE Pixels[height*width] <name="Mask">;
     } PIXELS; 
     height = height/2; 
     width = width/2;     
  }; 
} PALETTED_IMAGE;